// @generated by the capnpc-rust plugin to the Cap'n Proto schema compiler.
// DO NOT EDIT.
// source: poc.capnp

pub mod http {
    #![allow(unused_variables)]

    pub struct Client {
        pub client: ::capnp::capability::Client,
    }
    impl ::capnp::capability::FromClientHook for Client {
        fn new(hook: Box<dyn (::capnp::private::capability::ClientHook)>) -> Self {
            Self {
                client: ::capnp::capability::Client::new(hook),
            }
        }
        fn into_client_hook(self) -> Box<dyn (::capnp::private::capability::ClientHook)> {
            self.client.hook
        }
        fn as_client_hook(&self) -> &dyn (::capnp::private::capability::ClientHook) {
            &*self.client.hook
        }
    }
    #[derive(Copy, Clone)]
    pub struct Owned(());
    impl ::capnp::introspect::Introspect for Owned {
        fn introspect() -> ::capnp::introspect::Type {
            ::capnp::introspect::TypeVariant::Capability.into()
        }
    }
    impl ::capnp::traits::Owned for Owned {
        type Reader<'a> = Client;
        type Builder<'a> = Client;
    }
    impl ::capnp::traits::Pipelined for Owned {
        type Pipeline = Client;
    }
    impl<'a> ::capnp::traits::FromPointerReader<'a> for Client {
        fn get_from_pointer(
            reader: &::capnp::private::layout::PointerReader<'a>,
            _default: ::core::option::Option<&'a [::capnp::Word]>,
        ) -> ::capnp::Result<Self> {
            ::core::result::Result::Ok(::capnp::capability::FromClientHook::new(
                reader.get_capability()?,
            ))
        }
    }
    impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Client {
        fn init_pointer(
            _builder: ::capnp::private::layout::PointerBuilder<'a>,
            _size: u32,
        ) -> Self {
            unimplemented!()
        }
        fn get_from_pointer(
            builder: ::capnp::private::layout::PointerBuilder<'a>,
            _default: ::core::option::Option<&'a [::capnp::Word]>,
        ) -> ::capnp::Result<Self> {
            ::core::result::Result::Ok(::capnp::capability::FromClientHook::new(
                builder.get_capability()?,
            ))
        }
    }

    impl ::capnp::traits::SetterInput<Owned> for Client {
        fn set_pointer_builder(
            mut pointer: ::capnp::private::layout::PointerBuilder<'_>,
            from: Self,
            _canonicalize: bool,
        ) -> ::capnp::Result<()> {
            pointer.set_capability(from.client.hook);
            ::core::result::Result::Ok(())
        }
    }
    impl ::capnp::traits::HasTypeId for Client {
        const TYPE_ID: u64 = _private::TYPE_ID;
    }
    impl Clone for Client {
        fn clone(&self) -> Self {
            Self {
                client: ::capnp::capability::Client::new(self.client.hook.add_ref()),
            }
        }
    }
    impl Client {}
    pub trait Server {}
    pub struct ServerDispatch<_T> {
        pub server: _T,
    }
    impl<_S: Server + 'static> ::capnp::capability::FromServer<_S> for Client {
        type Dispatch = ServerDispatch<_S>;
        fn from_server(s: _S) -> ServerDispatch<_S> {
            ServerDispatch { server: s }
        }
    }
    impl<_T: Server> ::core::ops::Deref for ServerDispatch<_T> {
        type Target = _T;
        fn deref(&self) -> &_T {
            &self.server
        }
    }
    impl<_T: Server> ::core::ops::DerefMut for ServerDispatch<_T> {
        fn deref_mut(&mut self) -> &mut _T {
            &mut self.server
        }
    }
    impl<_T: Server> ::capnp::capability::Server for ServerDispatch<_T> {
        fn dispatch_call(
            &mut self,
            interface_id: u64,
            method_id: u16,
            params: ::capnp::capability::Params<::capnp::any_pointer::Owned>,
            results: ::capnp::capability::Results<::capnp::any_pointer::Owned>,
        ) -> ::capnp::capability::DispatchCallResult {
            match interface_id {
                _private::TYPE_ID => {
                    Self::dispatch_call_internal(&mut self.server, method_id, params, results)
                }
                _ => ::capnp::capability::DispatchCallResult::new(
                    ::capnp::capability::Promise::err(::capnp::Error::unimplemented(
                        "Method not implemented.".to_string(),
                    )),
                    false,
                ),
            }
        }
    }
    impl<_T: Server> ServerDispatch<_T> {
        pub fn dispatch_call_internal(
            server: &mut _T,
            method_id: u16,
            params: ::capnp::capability::Params<::capnp::any_pointer::Owned>,
            results: ::capnp::capability::Results<::capnp::any_pointer::Owned>,
        ) -> ::capnp::capability::DispatchCallResult {
            match method_id {
                _ => ::capnp::capability::DispatchCallResult::new(
                    ::capnp::capability::Promise::err(::capnp::Error::unimplemented(
                        "Method not implemented.".to_string(),
                    )),
                    false,
                ),
            }
        }
    }
    pub mod _private {
        pub const TYPE_ID: u64 = 0xb5ff_60fd_451c_c417;
    }

    pub mod header {
        #[derive(Copy, Clone)]
        pub struct Owned(());
        impl ::capnp::introspect::Introspect for Owned {
            fn introspect() -> ::capnp::introspect::Type {
                ::capnp::introspect::TypeVariant::Struct(
                    ::capnp::introspect::RawBrandedStructSchema {
                        generic: &_private::RAW_SCHEMA,
                        field_types: _private::get_field_types,
                        annotation_types: _private::get_annotation_types,
                    },
                )
                .into()
            }
        }
        impl ::capnp::traits::Owned for Owned {
            type Reader<'a> = Reader<'a>;
            type Builder<'a> = Builder<'a>;
        }
        impl ::capnp::traits::OwnedStruct for Owned {
            type Reader<'a> = Reader<'a>;
            type Builder<'a> = Builder<'a>;
        }
        impl ::capnp::traits::Pipelined for Owned {
            type Pipeline = Pipeline;
        }

        pub struct Reader<'a> {
            reader: ::capnp::private::layout::StructReader<'a>,
        }
        impl ::core::marker::Copy for Reader<'_> {}
        impl ::core::clone::Clone for Reader<'_> {
            fn clone(&self) -> Self {
                *self
            }
        }

        impl ::capnp::traits::HasTypeId for Reader<'_> {
            const TYPE_ID: u64 = _private::TYPE_ID;
        }
        impl<'a> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a> {
            fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
                Self { reader }
            }
        }

        impl<'a> ::core::convert::From<Reader<'a>> for ::capnp::dynamic_value::Reader<'a> {
            fn from(reader: Reader<'a>) -> Self {
                Self::Struct(::capnp::dynamic_struct::Reader::new(
                    reader.reader,
                    ::capnp::schema::StructSchema::new(
                        ::capnp::introspect::RawBrandedStructSchema {
                            generic: &_private::RAW_SCHEMA,
                            field_types: _private::get_field_types,
                            annotation_types: _private::get_annotation_types,
                        },
                    ),
                ))
            }
        }

        impl ::core::fmt::Debug for Reader<'_> {
            fn fmt(
                &self,
                f: &mut ::core::fmt::Formatter<'_>,
            ) -> ::core::result::Result<(), ::core::fmt::Error> {
                core::fmt::Debug::fmt(
                    &::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self),
                    f,
                )
            }
        }

        impl<'a> ::capnp::traits::FromPointerReader<'a> for Reader<'a> {
            fn get_from_pointer(
                reader: &::capnp::private::layout::PointerReader<'a>,
                default: ::core::option::Option<&'a [::capnp::Word]>,
            ) -> ::capnp::Result<Self> {
                ::core::result::Result::Ok(reader.get_struct(default)?.into())
            }
        }

        impl<'a> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a> {
            fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
                self.reader
            }
        }

        impl<'a> ::capnp::traits::Imbue<'a> for Reader<'a> {
            fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
                self.reader
                    .imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
            }
        }

        impl<'a> Reader<'a> {
            pub fn reborrow(&self) -> Reader<'_> {
                Self { ..*self }
            }

            pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
                self.reader.total_size()
            }
            #[inline]
            pub fn get_key(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
                ::capnp::traits::FromPointerReader::get_from_pointer(
                    &self.reader.get_pointer_field(0),
                    ::core::option::Option::None,
                )
            }
            #[inline]
            pub fn has_key(&self) -> bool {
                !self.reader.get_pointer_field(0).is_null()
            }
            #[inline]
            pub fn get_value(self) -> ::capnp::Result<::capnp::text::Reader<'a>> {
                ::capnp::traits::FromPointerReader::get_from_pointer(
                    &self.reader.get_pointer_field(1),
                    ::core::option::Option::None,
                )
            }
            #[inline]
            pub fn has_value(&self) -> bool {
                !self.reader.get_pointer_field(1).is_null()
            }
        }

        pub struct Builder<'a> {
            builder: ::capnp::private::layout::StructBuilder<'a>,
        }
        impl ::capnp::traits::HasStructSize for Builder<'_> {
            const STRUCT_SIZE: ::capnp::private::layout::StructSize =
                ::capnp::private::layout::StructSize {
                    data: 0,
                    pointers: 2,
                };
        }
        impl ::capnp::traits::HasTypeId for Builder<'_> {
            const TYPE_ID: u64 = _private::TYPE_ID;
        }
        impl<'a> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a> {
            fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
                Self { builder }
            }
        }

        impl<'a> ::core::convert::From<Builder<'a>> for ::capnp::dynamic_value::Builder<'a> {
            fn from(builder: Builder<'a>) -> Self {
                Self::Struct(::capnp::dynamic_struct::Builder::new(
                    builder.builder,
                    ::capnp::schema::StructSchema::new(
                        ::capnp::introspect::RawBrandedStructSchema {
                            generic: &_private::RAW_SCHEMA,
                            field_types: _private::get_field_types,
                            annotation_types: _private::get_annotation_types,
                        },
                    ),
                ))
            }
        }

        impl<'a> ::capnp::traits::ImbueMut<'a> for Builder<'a> {
            fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
                self.builder
                    .imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
            }
        }

        impl<'a> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a> {
            fn init_pointer(
                builder: ::capnp::private::layout::PointerBuilder<'a>,
                _size: u32,
            ) -> Self {
                builder
                    .init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE)
                    .into()
            }
            fn get_from_pointer(
                builder: ::capnp::private::layout::PointerBuilder<'a>,
                default: ::core::option::Option<&'a [::capnp::Word]>,
            ) -> ::capnp::Result<Self> {
                ::core::result::Result::Ok(
                    builder
                        .get_struct(
                            <Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE,
                            default,
                        )?
                        .into(),
                )
            }
        }

        impl ::capnp::traits::SetterInput<Owned> for Reader<'_> {
            fn set_pointer_builder(
                mut pointer: ::capnp::private::layout::PointerBuilder<'_>,
                value: Self,
                canonicalize: bool,
            ) -> ::capnp::Result<()> {
                pointer.set_struct(&value.reader, canonicalize)
            }
        }

        impl<'a> Builder<'a> {
            pub fn into_reader(self) -> Reader<'a> {
                self.builder.into_reader().into()
            }
            pub fn reborrow(&mut self) -> Builder<'_> {
                Builder {
                    builder: self.builder.reborrow(),
                }
            }
            pub fn reborrow_as_reader(&self) -> Reader<'_> {
                self.builder.as_reader().into()
            }

            pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
                self.builder.as_reader().total_size()
            }
            #[inline]
            pub fn get_key(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
                ::capnp::traits::FromPointerBuilder::get_from_pointer(
                    self.builder.get_pointer_field(0),
                    ::core::option::Option::None,
                )
            }
            #[inline]
            pub fn set_key(
                &mut self,
                value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>,
            ) {
                ::capnp::traits::SetterInput::set_pointer_builder(
                    self.builder.reborrow().get_pointer_field(0),
                    value,
                    false,
                )
                .unwrap()
            }
            #[inline]
            pub fn init_key(self, size: u32) -> ::capnp::text::Builder<'a> {
                self.builder.get_pointer_field(0).init_text(size)
            }
            #[inline]
            pub fn has_key(&self) -> bool {
                !self.builder.is_pointer_field_null(0)
            }
            #[inline]
            pub fn get_value(self) -> ::capnp::Result<::capnp::text::Builder<'a>> {
                ::capnp::traits::FromPointerBuilder::get_from_pointer(
                    self.builder.get_pointer_field(1),
                    ::core::option::Option::None,
                )
            }
            #[inline]
            pub fn set_value(
                &mut self,
                value: impl ::capnp::traits::SetterInput<::capnp::text::Owned>,
            ) {
                ::capnp::traits::SetterInput::set_pointer_builder(
                    self.builder.reborrow().get_pointer_field(1),
                    value,
                    false,
                )
                .unwrap()
            }
            #[inline]
            pub fn init_value(self, size: u32) -> ::capnp::text::Builder<'a> {
                self.builder.get_pointer_field(1).init_text(size)
            }
            #[inline]
            pub fn has_value(&self) -> bool {
                !self.builder.is_pointer_field_null(1)
            }
        }

        pub struct Pipeline {
            _typeless: ::capnp::any_pointer::Pipeline,
        }
        impl ::capnp::capability::FromTypelessPipeline for Pipeline {
            fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
                Self {
                    _typeless: typeless,
                }
            }
        }
        impl Pipeline {}
        mod _private {
            pub static ENCODED_NODE: [::capnp::Word; 48] = [
                ::capnp::word(0, 0, 0, 0, 6, 0, 6, 0),
                ::capnp::word(55, 216, 179, 70, 165, 6, 80, 245),
                ::capnp::word(15, 0, 0, 0, 1, 0, 0, 0),
                ::capnp::word(23, 196, 28, 69, 253, 96, 255, 181),
                ::capnp::word(2, 0, 7, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(41, 0, 0, 0, 98, 0, 0, 0),
                ::capnp::word(21, 0, 0, 0, 178, 0, 0, 0),
                ::capnp::word(29, 0, 0, 0, 7, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(25, 0, 0, 0, 119, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(112, 111, 99, 46, 99, 97, 112, 110),
                ::capnp::word(112, 58, 72, 116, 116, 112, 46, 72),
                ::capnp::word(101, 97, 100, 101, 114, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
                ::capnp::word(8, 0, 0, 0, 3, 0, 4, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(41, 0, 0, 0, 34, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(36, 0, 0, 0, 3, 0, 1, 0),
                ::capnp::word(48, 0, 0, 0, 2, 0, 1, 0),
                ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
                ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(45, 0, 0, 0, 50, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(40, 0, 0, 0, 3, 0, 1, 0),
                ::capnp::word(52, 0, 0, 0, 2, 0, 1, 0),
                ::capnp::word(107, 101, 121, 0, 0, 0, 0, 0),
                ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(118, 97, 108, 117, 101, 0, 0, 0),
                ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
                ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
            ];
            pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
                match index {
                    0 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
                    1 => <::capnp::text::Owned as ::capnp::introspect::Introspect>::introspect(),
                    _ => panic!("invalid field index {}", index),
                }
            }
            pub fn get_annotation_types(
                child_index: Option<u16>,
                index: u32,
            ) -> ::capnp::introspect::Type {
                panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
            }
            pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema =
                ::capnp::introspect::RawStructSchema {
                    encoded_node: &ENCODED_NODE,
                    nonunion_members: NONUNION_MEMBERS,
                    members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
                    members_by_name: MEMBERS_BY_NAME,
                };
            pub static NONUNION_MEMBERS: &[u16] = &[0, 1];
            pub static MEMBERS_BY_DISCRIMINANT: &[u16] = &[];
            pub static MEMBERS_BY_NAME: &[u16] = &[0, 1];
            pub const TYPE_ID: u64 = 0xf550_06a5_46b3_d837;
        }
    }
}
